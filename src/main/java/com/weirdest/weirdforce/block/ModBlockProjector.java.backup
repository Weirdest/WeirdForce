package com.weirdest.weirdforce.block;

import com.weirdest.weirdforce.Main;
import com.weirdest.weirdforce.WeirdForceTabs;

import cpw.mods.fml.common.eventhandler.SubscribeEvent;
import cpw.mods.fml.common.gameevent.TickEvent;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.entity.Entity;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import net.minecraft.world.World;

public class ModBlockProjector extends Block {
	
	public IIcon[] icons = new IIcon[6];
	public int[] coords = new int[3];
	public World myWorld;
	public boolean fieldState = false;

	protected ModBlockProjector(Material material) {
		super(material);
		this.setBlockName("projector");
		this.setCreativeTab(WeirdForceTabs.tabWeirdForce);
		this.setResistance(5000F);
		this.setHardness(12F);
	}
	
	@Override
	public void registerBlockIcons(IIconRegister reg) {
		
		//Top & Bottom
		this.icons[0] = reg.registerIcon(Main.MODID + ":" + "energyChannel");
		this.icons[1] = reg.registerIcon(Main.MODID + ":" + "energyChannel");
		
		//All other sides
		for(int x = 2; x < 6; x++) {
			this.icons[x] = reg.registerIcon(Main.MODID + ":" + "projectorSide");
		}
	}
	
	@Override
	public IIcon getIcon(int side, int meta) {
	    return this.icons[side];
	}
	
	//FUNCTIONALITY!!!!!!
	
	//Set tick rate
	public int tickRate(World world) {
		return 4; //Wait 4 ticks before updating
	}
	
	//Get my coords & world
	public void onBlockAdded(World world, int x, int y, int z) {
		this.coords[0] = x;
		this.coords[1] = y;
		this.coords[2] = z;
		this.myWorld = world;
	}
	
	@SubscribeEvent
	public void onServerTick(TickEvent.ServerTickEvent event) {
		System.out.println("Update Called!");

		
		if(!this.myWorld.isRemote) {
			//Yay i can edit this world
			
			if(this.myWorld.isBlockIndirectlyGettingPowered(this.coords[0], this.coords[1], this.coords[2]) && !this.fieldState) {
				//I'm Powered and the field is off
				powerToggle(this.myWorld, this.coords[0], this.coords[1], this.coords[2], ModBlocks.fieldBlock);
				this.fieldState = true;
				
			} else if(!this.myWorld.isBlockIndirectlyGettingPowered(this.coords[0], this.coords[1], this.coords[2]) && this.fieldState) {
				//Im not powered and field is on
				powerToggle(this.myWorld, this.coords[0], this.coords[1], this.coords[2], Blocks.air);
				this.fieldState = false;
			}
		}
	}
	
	//Dynamic!
	public void powerToggle(World world, int x, int y, int z, Block replaceWith) {
		//Check if there is another projector 8 blocks in 1d direction
		//1d being forward, back, left, right
		for(int n = 1; n < 10; n++) {
			
			//Check towards north first
			if(world.getBlock(x, y, (z - n)) == ModBlocks.projector) {
				
				//If projector is found then set all blocks before it as replaceWith
				for(int k = 1; k < n; k++) {
					world.setBlock(x, y, (z - k), replaceWith);
				}
			} 
			
			//Check South
			if(world.getBlock(x, y, (z + n)) == ModBlocks.projector) {
				
				for(int k = 1; k < n; k++) {
					world.setBlock(x, y, (z + k), replaceWith);
				}
			} 
			
			//Check west
			if(world.getBlock((x - n), y, z) == ModBlocks.projector) {
				
				for(int k = 1; k < n; k++) {
					world.setBlock((x - k), y, z, replaceWith);
				}
			} 
			
			//Check East
			if(world.getBlock((x + n), y, z) == ModBlocks.projector) {
				
				for(int k = 1; k < n; k++) {
					world.setBlock((x + k), y, z, replaceWith);
				}
			}
		}//For() Container
	}//Method Container

}
